generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  passwordHash String
  role Role @default(USER)
  approved Boolean @default(false)
  mfaEnabled Boolean @default(false)
  mfaSecret String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  beerLogs BeerLog[]
  payments Payment[]
  auditLogs AuditLog[] @relation("AuditActor")
  creates BeerLog[] @relation("CreatedBy")
  updates BeerLog[] @relation("UpdatedBy")
}

model BeerLog {
  id Int @id @default(autoincrement())
  userId Int
  quantity Int
  date String
  costCentsAtTime Int
  isPaidFor Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields:[userId],references:[id])
  createdBy User? @relation("CreatedBy", fields:[createdById], references:[id])
  createdById Int?
  updatedBy User? @relation("UpdatedBy", fields:[updatedById], references:[id])
  updatedById Int?
}

model Payment {
  id Int @id @default(autoincrement())
  userId Int
  amountCents Int
  currency String @default("EUR")
  paypalOrderId String?
  status String @default("CREATED")
  createdAt DateTime @default(now())
  user User @relation(fields:[userId],references:[id])
}

model AuditLog {
  id Int @id @default(autoincrement())
  actorId Int?
  action String
  entity String
  entityId Int?
  diff Json?
  createdAt DateTime @default(now())
  actor User? @relation("AuditActor",fields:[actorId],references:[id])
}

model SystemLog {
  id Int @id @default(autoincrement())
  level String
  message String
  meta Json?
  createdAt DateTime @default(now())
}

model Setting {
  key String @id
  value String
}
